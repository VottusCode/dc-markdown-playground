{"version":3,"sources":["components/html.component.tsx","components/formatted.component.tsx","components/textarea.component.tsx","App.tsx","index.tsx"],"names":["Html","props","text","Formatted","dangerouslySetInnerHTML","__html","Textarea","className","onChange","handleChange","App","useState","setText","spoilers","setSpoilers","useEffect","document","getElementsByClassName","filtered","filter","el","classList","contains","console","log","length","forEach","add","addEventListener","href","val","toHTML","target","value","ReactDOM","render","StrictMode","getElementById"],"mappings":"0PAQeA,EAFmB,SAACC,GAAD,OAAW,8BAAOA,EAAMC,OCU3CC,EAJ6B,SAACF,GAAD,OAC1C,uBAAGG,wBAAyB,CAAEC,OAAQJ,EAAMC,SCH/BI,EAJ2B,SAACL,GAAD,OACxC,8BAAUM,UAAU,WAAWC,SAAUP,EAAMQ,gBCkFlCC,EA/EO,WAAO,IAAD,EACFC,mBAAS,IADP,mBACnBT,EADmB,KACbU,EADa,OAEMD,oBAAS,GAFf,mBAEnBE,EAFmB,KAETC,EAFS,KAsB1B,OAfAC,qBAAU,WACR,IAAMF,EAAWG,SAASC,uBAAuB,aAC3CC,EAAW,YAAIL,GAAUM,QAAO,SAACC,GAAD,OAASA,EAAGC,UAAUC,SAAS,SACrEC,QAAQC,IAAIN,GAEZJ,EAAYI,EAASO,QAAU,GAE/BP,EAASQ,SAAQ,SAACN,GAChBA,EAAGC,UAAUM,IAAI,MACjBP,EAAGQ,iBAAiB,SAAS,WAC3BR,EAAGC,UAAUM,IAAI,kBAGpB,CAACzB,IAGF,yBAAKK,UAAU,OACb,yBAAKA,UAAU,aACb,2DACA,4BACE,uBAAGsB,KAAK,kDAAR,oBAEK,IAHP,MAIK,uBAAGA,KAAK,iCAAR,eAGL,yBAAKtB,UAAU,WACb,yBAAKA,UAAU,UACb,wCACA,kBAAC,EAAD,CAAUE,aAhCC,SAACqB,GAAD,OACnBlB,EAAQmB,iBAAsB,kBAARD,EAAmBA,EAAIE,OAAOC,MAAQH,QAkCtD,yBAAKvB,UAAU,UACb,sCACA,kBAAC,EAAD,CAAWL,KAAMA,KAGnB,yBAAKK,UAAU,UACb,wCACA,kBAAC,EAAD,CAAML,KAAMA,MAIfW,GACC,6IAGE,6BAHF,2BAI2B,IACzB,uBAAGgB,KAAK,gFAAR,kDAON,yBAAKtB,UAAU,cACb,+CACoB,IAClB,uBAAGsB,KAAK,wDAAR,gBAIF,uHC5ERK,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpB,SAASqB,eAAe,W","file":"static/js/main.2f5ef989.chunk.js","sourcesContent":["import React from \"react\"\n\ntype HtmlProps = {\n  text: string\n}\n\nconst Html: React.FC<HtmlProps> = (props) => <code>{props.text}</code>\n\nexport default Html\n","import React from \"react\"\n\n// function Formatted(props) {\n//     return (\n//         <p dangerouslySetInnerHTML={{__html: props.text}}/>\n//     )\n// }\n\ntype FormattedProps = {\n  text: string\n}\n\nconst Formatted: React.FC<FormattedProps> = (props) => (\n  <p dangerouslySetInnerHTML={{ __html: props.text }}></p>\n)\n\nexport default Formatted\n","import React from \"react\"\n\ntype TextareaProps = {\n  handleChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => any\n}\n\nconst Textarea: React.FC<TextareaProps> = (props) => (\n  <textarea className=\"textarea\" onChange={props.handleChange} />\n)\n\nexport default Textarea\n","import React, { useEffect, useState } from \"react\"\nimport \"../node_modules/bulma/bulma.sass\"\nimport \"./assets/scss/styles.scss\"\n// @ts-ignore\nimport { toHTML } from \"discord-markdown\"\nimport Html from \"./components/html.component\"\nimport Formatted from \"./components/formatted.component\"\nimport Textarea from \"./components/textarea.component\"\n// import \"./assets/js/spoiler\";\n\nconst App: React.FC = () => {\n  const [text, setText] = useState(\"\")\n  const [spoilers, setSpoilers] = useState(false)\n\n  const setTextValue = (val: React.ChangeEvent<HTMLTextAreaElement> | string) =>\n    setText(toHTML(typeof val !== \"string\" ? val.target.value : val))\n\n  useEffect(() => {\n    const spoilers = document.getElementsByClassName(\"d-spoiler\")\n    const filtered = [...spoilers].filter((el) => !el.classList.contains(\"rc\"))\n    console.log(filtered)\n\n    setSpoilers(filtered.length >= 1) // Spoiler disclaimer\n\n    filtered.forEach((el) => {\n      el.classList.add(\"rc\")\n      el.addEventListener(\"click\", () => {\n        el.classList.add(\"active\")\n      })\n    })\n  }, [text])\n\n  return (\n    <div className=\"app\">\n      <div className=\"container\">\n        <h1>Discord Markdown Playground</h1>\n        <h2>\n          <a href=\"https://github.com/brussell98/discord-markdown\">\n            discord-markdown\n          </a>{\" \"}\n          by <a href=\"https://github.com/brussell98\">brussell98</a>\n        </h2>\n\n        <div className=\"columns\">\n          <div className=\"column\">\n            <h1>The text</h1>\n            <Textarea handleChange={setTextValue} />\n          </div>\n\n          <div className=\"column\">\n            <h1>Result</h1>\n            <Formatted text={text} />\n          </div>\n\n          <div className=\"column\">\n            <h1>The HTML</h1>\n            <Html text={text} />\n          </div>\n        </div>\n\n        {spoilers && (\n          <div>\n            Disclaimer: discord-markdown does not implement the Spoiler\n            functionality, you have to implement it yourself.\n            <br />\n            For a React example, see{\" \"}\n            <a href=\"https://github.com/VottusCode/dc-markdown-playground/blob/master/src/App.tsx\">\n              App.tsx on VottusCode/dc-markdown-playground\n            </a>\n          </div>\n        )}\n      </div>\n\n      <div className=\"app-footer\">\n        <p>\n          Hosted by Vottus.{\" \"}\n          <a href=\"https://github.com/VottusCode/dc-markdown-playground\">\n            Source Code\n          </a>\n        </p>\n        <p>\n          Disclaimer: Additional CSS / JS may be required for some formatting\n          and functionality\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}